plugins {
    id 'kotlin-platform-js'
}

apply plugin: 'kotlinx-serialization'
apply plugin: 'com.moowork.node'

dependencies {
    compile project(":core:common-js")
    expectedBy project(':client:common-client')
    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-js"
    testCompile 'org.jetbrains:kotlin-mocha:3.0.1-pre.59-kotlin-1.3.0'
}

[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "commonjs"
    kotlinOptions.allWarningsAsErrors = true
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    version = '8.9.4'
    download = true
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}

task installMockSocket(type: NpmTask) {
    args = ['install', 'mock-socket']
}

task installDependencies(dependsOn: [installMocha, installMockSocket])

task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installDependencies]) {
    script = file('node_modules/mocha/bin/mocha')
    args = [compileTestKotlin2Js.outputFile]
}

test.dependsOn runMocha