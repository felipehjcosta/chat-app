apply plugin: "kotlin-multiplatform"
apply plugin: 'kotlinx-serialization'
apply plugin: 'org.jetbrains.kotlin.native.cocoapods'

version = "0.1.0"

kotlin {
    jvm {
        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    js {
        compilations.main.kotlinOptions {
            moduleKind = "commonjs"
        }
        compilations.test.kotlinOptions {
            moduleKind = "commonjs"
        }
        browser {
            testTask {
                useKarma {
                    usePhantomJS()
                }
            }
        }
    }
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('client')
            }
        }
    }
    cocoapods {
        // Configure fields required by CocoaPods.
        summary = "chat-client"
        homepage = "https://github.com/felipehjcosta"

        pod('SocketRocket', '0.5.1')
    }

    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation 'kotlin.Experimental'
                useExperimentalAnnotation 'kotlinx.serialization.UnstableDefault'
            }
        }
        commonMain {
            dependencies {
                api project(":common:core")
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation 'com.squareup.okhttp3:okhttp:3.11.0'
            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "junit:junit:4.12"
                implementation "io.mockk:mockk:1.8.13.kotlin13"
                implementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }

        jsTest {
            dependencies {
                implementation kotlin('test-js')
                implementation npm("mock-socket", "^9.0.0")
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            }
        }

        iosTest {
            dependencies {
            }
        }
    }

    // Configure all compilations of all targets:
    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
            }
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone XÊ€"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}
//tasks.check.dependsOn iosTest