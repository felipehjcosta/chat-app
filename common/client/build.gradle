apply plugin: "kotlin-multiplatform"

version = "0.1.0"
def ios_framework_name = "Client"

kotlin {
    jvm {
        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    js {
        browser()
    }
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework("$ios_framework_name")
            }
        }

        final def watchTarget = System.getenv('SDK_NAME')?.startsWith("watchos") ? presets.watchosArm64 : presets.watchosX86

        fromPreset(watchTarget, 'watch') {
            binaries {
                framework("$ios_framework_name")
            }
        }
    }

    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation 'kotlin.Experimental'
                useExperimentalAnnotation 'kotlinx.serialization.UnstableDefault'
            }
        }
        commonMain {
            dependencies {
                api project(":common:core")
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            }
        }

        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation 'com.squareup.okhttp3:okhttp:4.3.0'
            }
        }

        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "junit:junit:$junit_version"
                implementation "io.mockk:mockk:1.9"
                implementation 'com.squareup.okhttp3:mockwebserver:4.3.0'
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }

        jsTest {
            dependencies {
                implementation kotlin('test-js')
                implementation npm("mock-socket", "^9.0.0")
            }
        }

        appleMain {
            dependsOn commonMain
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
            }
        }

        appleTest {
            dependsOn commonTest
        }

        configure([targets['ios'],
                   targets['watch']
        ]){
            compilations.main.source(sourceSets.appleMain)
            compilations.test.source(sourceSets.appleTest)
        }
    }

    // Configure all compilations of all targets:
    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
            }
        }
    }
}

task packForXcode {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String buildType = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    def keyFrameworkPrefix = "$ios_framework_name${buildType.toLowerCase().capitalize()}"
    dependsOn "link${keyFrameworkPrefix}FrameworkIos"
    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework("$ios_framework_name", buildType).outputFile
        copy {
            from srcFile.parent
            into frameworkDir
        }
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXcode

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 11"
    dependsOn 'linkDebugTestIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getTest("DEBUG").outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', '--standalone', device, binary.absolutePath
        }
    }
}
tasks.check.dependsOn iosTest

task watchTest {
    def device = project.findProperty("watchDevice")?.toString() ?: "Apple Watch Series 5 - 44mm"
    dependsOn 'linkDebugTestWatch'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'watch' on an WatchOS simulator"

    doLast {
        def binary = kotlin.targets.watch.binaries.getTest("DEBUG").outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', '--standalone', device, binary.absolutePath
        }
    }
}
tasks.check.dependsOn watchTest